{"scenes":[{"name":"main","layers":[{"name":"obj","gameObjects":[{"name":"Starfield 1","components":[{"type":"pos","x":340,"y":1200},{"type":"sprite","id":"starfield.png"},{"type":"origin","name":"bot","custom":{"x":0,"y":0}},{"type":"scale","x":1,"y":1},{"type":"tag","name":"starfield"},{"type":"tag","name":"starfield-one"}]},{"name":"Starfield 2","components":[{"type":"pos","x":340,"y":1200},{"type":"sprite","id":"starfield.png"},{"type":"origin","name":"bot","custom":{"x":0,"y":0}},{"type":"scale","x":1,"y":1},{"type":"tag","name":"starfield"},{"type":"tag","name":"starfield-two"}]},{"name":"Player Starship","components":[{"type":"pos","x":340,"y":400},{"type":"sprite","id":"spaceship.png"},{"type":"tag","name":"player"},{"type":"origin","name":"center","custom":{"x":0,"y":0}}]},{"name":"Camera","components":[{"type":"pos","x":0,"y":0},{"type":"tag","name":"camera"}]},{"name":"Bullet","components":[{"type":"pos","x":20,"y":800},{"type":"sprite","id":"bullet.png"},{"type":"scale","x":0.35,"y":0.35},{"type":"tag","name":"bullet"},{"type":"tag","name":"demo-bullet"},{"type":"origin","name":"center","custom":{"x":0,"y":0}}]},{"name":"Scoreboard","components":[{"type":"pos","x":60,"y":60},{"type":"rect","w":40,"h":40},{"type":"text","text":"1,234,567","size":20,"width":0},{"type":"tag","name":"scoreboard"}]},{"name":"Enemy Spaceship 1","components":[{"type":"pos","x":0,"y":800},{"type":"sprite","id":"enemy-spaceship-1.png"},{"type":"scale","x":0.25,"y":0.25},{"type":"tag","name":"enemy1"},{"type":"rotate","angle":3.141592653589793},{"type":"origin","name":"bot","custom":{"x":0,"y":0}}]}]},{"name":"bg","gameObjects":[]},{"name":"ui","gameObjects":[]}],"actions":[{"type":"on","code":"const START_SPEED = 400;\n\n// When the player is added, set its velocity, camera offset, and starting position\n\n(k, player) => {\n  player.cameraOffset = k.vec2(0, 0);\n  player.velocity = k.vec2(0, -START_SPEED);\n  player.mouseDriven = false;\n  player.pos.x = window.innerWidth * 0.5;\n  player.startPos = k.vec2(player.pos.x, player.pos.y);\n}","tag":"player","eventName":"add"},{"type":"action","code":"// Move the player character by its velocity every frame\n\n(k, player) => {\n  player.move(player.velocity);\n\n  const deltaX = player.pos.x - player.startPos.x;\n  const deltaY = player.pos.y - player.startPos.y;\n  const dist = Math.sqrt((deltaX * deltaX) + (deltaY * deltaY));\n\n  k.ext.data.score = dist;\n}","tag":"player"},{"type":"on","code":"// Adjust the starfield such that its width matches the window's width\n\n(k, starfield) => {\n  starfield.scale.x = window.innerWidth / 512.0;\n  starfield.scale.y = starfield.scale.x\n  starfield.pos.x = window.innerWidth * 0.5;\n  if (starfield.is('starfield-two')) {\n    starfield.pos.y -= (starfield.height * starfield.scale.y);\n  }\n}","eventName":"add","tag":"starfield"},{"type":"keyDown","code":"// Move the player left, but not outside of the screen boundary\n\n(k) => {\n  k.every('player', (player) => {\n    player.move(k.vec2(-player.velocity.len(), 0));\n    k.every('camera', (camera) => {\n      player.pos.x = Math.max(player.pos.x, camera.pos.x - (window.innerWidth * 0.5));\n    });\n  });\n}","keyName":"left"},{"type":"keyDown","code":"// Move the player right, but not outside of the screen boundary\n\n(k) => {\n  k.every('player', (player) => {\n    player.move(k.vec2(player.velocity.len(), 0));\n    k.every('camera', (camera) => {\n      player.pos.x = Math.min(player.pos.x, camera.pos.x + (window.innerWidth * 0.5));\n    });\n  });\n}","keyName":"right"},{"type":"keyDown","code":"// Move the player up, but not outside of the screen boundary\n\n(k) => {\n  k.every('player', (player) => {\n    player.move(k.vec2(0, -player.velocity.len()));\n    k.every('camera', (camera) => {\n      player.pos.y = Math.max(player.pos.y, camera.pos.y - (window.innerHeight * 0.5));\n    });\n  });\n}","keyName":"up"},{"type":"action","code":"// Every frame, move the camera the same way as the player\n\n(k, camera) => {\n  k.every('player', (player) => {\n    camera.move(player.velocity);\n  });\n  k.every('scoreboard', (scoreboard) => {\n    scoreboard.pos.x = camera.pos.x - (window.innerWidth * 0.5) + 60;\n    scoreboard.pos.y = camera.pos.y - (window.innerHeight * 0.5) + 60;\n  });\n  k.camPos(camera.pos);\n}","tag":"camera"},{"type":"on","code":"// When the camera is added, set its position to the center of the window\n\n(k, camera) => {\n  camera.pos.x = window.innerWidth * 0.5;\n  camera.pos.y = window.innerHeight * 0.5;\n}","eventName":"add","tag":"camera"},{"type":"keyDown","code":"// Move the player down, but not outside of the screen boundary\n\n(k) => {\n  k.every('player', (player) => {\n    player.move(k.vec2(0, player.velocity.len()));\n    k.every('camera', (camera) => {\n      player.pos.y = Math.min(player.pos.y, camera.pos.y + (window.innerHeight * 0.5));\n    });\n  });\n}","keyName":"down"},{"type":"action","code":"// Move the bullet forward each frame, and destroy it if it's far from the player\n\n(k, bullet) => {\n  const player = k.get('player')[0];\n  if (!player || bullet.is('demo-bullet')) {\n    return;\n  }\n  bullet.move(bullet.velocity);\n  const deltaX = player.pos.x - bullet.pos.x;\n  const deltaY = player.pos.y - bullet.pos.y;\n  const dist = Math.sqrt((deltaX * deltaX) + (deltaY * deltaY));\n  if (dist > 1000) {\n    k.destroy(bullet);\n  }\n}","tag":"bullet"},{"type":"keyDown","code":"// Spawn bullets\n\nconst BULLET_VELOCITY = 2500;\n\nwindow.addBullets = (k, scale, pos, spread, yOffset) => {\n  const bulletLeft = k.add([\n    'bullet',\n    k.pos(pos.x - spread, pos.y + yOffset),\n    k.scale(scale.x, scale.y),\n    k.sprite('bullet.png'),\n    k.origin('center'),\n  ]);\n  bulletLeft.velocity = k.vec2(0, -BULLET_VELOCITY);\n\n  const bulletRight = k.add([\n    'bullet',\n    k.pos(pos.x + spread, pos.y + yOffset),\n    k.scale(scale.x, scale.y),\n    k.sprite('bullet.png'),\n    k.origin('center'),\n  ]);\n  bulletRight.velocity = k.vec2(0, -BULLET_VELOCITY);\n};\n\n(k) => {\n  const player = k.get('player')[0];\n  const demoBullet = k.get('demo-bullet')[0];\n  if (player && demoBullet) {\n    addBullets(k, demoBullet.scale, player.pos, player.width * 0.35, 6);  \n  }\n}","keyName":"space"},{"type":"action","code":"// Adjust the starfields positions as needed\n\n(k) => {\n  const sf1 = k.get('starfield-one')[0];\n  const sf2 = k.get('starfield-two')[0];\n  const player = k.get('player')[0];\n  if (!sf1 || !sf2 || !player) {\n    return;\n  }\n\n  const height1 = sf1.height * sf1.scale.y;\n  const height2 = sf2.height * sf2.scale.y;\n\n  if (player.pos.y < (sf1.pos.y - (height1 * 0.5)) && player.pos.y > (sf1.pos.y - height1)) {\n    sf2.pos.y = sf1.pos.y - height1;\n  } else if (player.pos.y < (sf2.pos.y - (height2 * 0.5)) && player.pos.y > (sf2.pos.y - height2)) {\n    sf1.pos.y = sf2.pos.y - height2;\n  }\n}"},{"type":"mouseDown","code":"// Mouse down turns it into mouse-driven mode\n\n(k) => {\n  k.every('player', (player) => {\n    player.mouseDriven = true;\n  });\n}"},{"type":"action","code":"// If the player is mouse-driven, drive it by the mouse\n\n(k) => {\n  const player = k.get('player')[0];\n  const camera = k.get('camera')[0];\n  if (!player || !player.mouseDriven || !camera) {\n    return;\n  }\n\n  const mousePos = k.mousePos();\n  player.pos.x = mousePos.x;\n  player.pos.y = mousePos.y + camera.pos.y - (window.innerHeight * 0.5);\n\n  const demoBullet = k.get('demo-bullet')[0];\n  if (demoBullet) {\n    addBullets(k, demoBullet.scale, player.pos, player.width * 0.35, 6);  \n  }\n}"},{"type":"mouseRelease","code":"// Mouse release turns it into keyboard-driven mode\n\n(k) => {\n  k.every('player', (player) => {\n    player.mouseDriven = false;\n  });\n}"},{"type":"action","code":"(k, scoreboard) => {\n  scoreboard.text = '' + Math.floor(k.ext.data.score);\n}","tag":"scoreboard"},{"type":"action","code":"(k) => {\n  const player = k.get('player')[0];\n\n  if (Math.random() < 0.025) {\n    k.add([\n      k.pos(Math.random() * window.innerWidth, player.pos.y - ((1 + Math.random()) * window.innerHeight)),\n      k.sprite('enemy-spaceship-1.png'),\n      k.scale(0.25, 0.25),\n      k.rotate(3.141592653589793238462643383279),\n      k.origin('bot'),\n      'enemy1',\n    ]);\n  }\n\n  const toDestroy = [];\n  k.every('enemy1', (enemy1) => {\n    if (enemy1.pos.y - 300 > player.pos.y) {\n      toDestroy.push(enemy1);\n    }\n  });\n  toDestroy.forEach(k.destroy);\n}"},{"type":"collides","code":"(k, bullet, enemy1) => {\n  k.destroy(enemy1);\n}","tag":"bullet","otherTag":"enemy1"},{"type":"collides","code":"(k, enemy1, player) => {\n  k.ext.scores.submit(k.ext.data.score);\n  k.go('gameover');\n}","tag":"enemy1","otherTag":"player"}]},{"name":"gameover","layers":[{"name":"obj","gameObjects":[{"name":"Red Background","components":[{"type":"pos","x":0,"y":0},{"type":"rect","w":1000000,"h":1000000},{"type":"color","r":1,"g":0,"b":0.01568627450980392,"a":1},{"type":"origin","name":"center","custom":{"x":0,"y":0}}]},{"name":"Score Text","components":[{"type":"pos","x":360,"y":60},{"type":"rect","w":40,"h":40},{"type":"color","r":0,"g":0,"b":0,"a":1},{"type":"text","text":"Score: 123,456,789","size":20,"width":0},{"type":"tag","name":"scoretext"},{"type":"origin","name":"center","custom":{"x":0,"y":0}}]}]},{"name":"bg","gameObjects":[]},{"name":"ui","gameObjects":[]}],"actions":[{"type":"action","code":"(k, scoretext) => {\n  scoretext.text = 'Score: ' + Math.floor(k.ext.data.score);\n  k.camPos(scoretext.pos);\n}","tag":"scoretext"},{"type":"mouseClick","code":"(k) => {\n  k.go('main');\n}"}]}],"assets":[{"name":"spaceship.png","type":"sprite","skylink":"sia:KADGVz2W9P94fUNhAkd9ZkIfZKAfTVpkRagnIJ8dN_drDw"},{"name":"starfield.png","type":"sprite","skylink":"sia:_ABmpWcYCeAZPQQNIIX4ZrvUjFryRAjRCfHS1V9G_xlNXg"},{"name":"bullet.png","type":"sprite","skylink":"sia:AACAWSmAXENqZ9NIO6942rJ3OI1RgewiA3VzWd-E2O-zkg"},{"name":"enemy-spaceship-1.png","type":"sprite","skylink":"sia:RABL8VQFf2l4CHgweubik3Hd7sd5lFAR9R1nuDy2xBjzNg"}],"currentSceneName":"main"}